//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./ipquery_types');
//HELPER FUNCTIONS AND STRUCTURES

ipquery_ipquery_args = function(args) {
  this.ip = null;
  this.tag = null;
  if (args) {
    if (args.ip !== undefined && args.ip !== null) {
      this.ip = args.ip;
    }
    if (args.tag !== undefined && args.tag !== null) {
      this.tag = args.tag;
    }
  }
};
ipquery_ipquery_args.prototype = {};
ipquery_ipquery_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ip = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tag = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ipquery_ipquery_args.prototype.write = function(output) {
  output.writeStructBegin('ipquery_ipquery_args');
  if (this.ip !== null && this.ip !== undefined) {
    output.writeFieldBegin('ip', Thrift.Type.STRING, 1);
    output.writeString(this.ip);
    output.writeFieldEnd();
  }
  if (this.tag !== null && this.tag !== undefined) {
    output.writeFieldBegin('tag', Thrift.Type.STRING, 2);
    output.writeString(this.tag);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ipquery_ipquery_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ipquery_ipquery_result.prototype = {};
ipquery_ipquery_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ipquery_ipquery_result.prototype.write = function(output) {
  output.writeStructBegin('ipquery_ipquery_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ipquery_ipqueryEx_args = function(args) {
  this.ipList = null;
  this.tag = null;
  if (args) {
    if (args.ipList !== undefined && args.ipList !== null) {
      this.ipList = Thrift.copyList(args.ipList, [null]);
    }
    if (args.tag !== undefined && args.tag !== null) {
      this.tag = args.tag;
    }
  }
};
ipquery_ipqueryEx_args.prototype = {};
ipquery_ipqueryEx_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.ipList = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.ipList.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tag = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ipquery_ipqueryEx_args.prototype.write = function(output) {
  output.writeStructBegin('ipquery_ipqueryEx_args');
  if (this.ipList !== null && this.ipList !== undefined) {
    output.writeFieldBegin('ipList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.ipList.length);
    for (var iter7 in this.ipList)
    {
      if (this.ipList.hasOwnProperty(iter7))
      {
        iter7 = this.ipList[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.tag !== null && this.tag !== undefined) {
    output.writeFieldBegin('tag', Thrift.Type.STRING, 2);
    output.writeString(this.tag);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ipquery_ipqueryEx_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
ipquery_ipqueryEx_result.prototype = {};
ipquery_ipqueryEx_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.success = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readString();
          this.success.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ipquery_ipqueryEx_result.prototype.write = function(output) {
  output.writeStructBegin('ipquery_ipqueryEx_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter15 in this.success)
    {
      if (this.success.hasOwnProperty(iter15))
      {
        iter15 = this.success[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ipquery_ipqueryVersion_args = function(args) {
};
ipquery_ipqueryVersion_args.prototype = {};
ipquery_ipqueryVersion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ipquery_ipqueryVersion_args.prototype.write = function(output) {
  output.writeStructBegin('ipquery_ipqueryVersion_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ipquery_ipqueryVersion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ipquery_ipqueryVersion_result.prototype = {};
ipquery_ipqueryVersion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ipquery_ipqueryVersion_result.prototype.write = function(output) {
  output.writeStructBegin('ipquery_ipqueryVersion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ipqueryClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
ipqueryClient.prototype = {};
ipqueryClient.prototype.seqid = function() { return this._seqid; }
ipqueryClient.prototype.new_seqid = function() { return this._seqid += 1; }
ipqueryClient.prototype.ipquery = function(ip, tag, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_ipquery(ip, tag);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_ipquery(ip, tag);
  }
};

ipqueryClient.prototype.send_ipquery = function(ip, tag) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('ipquery', Thrift.MessageType.CALL, this.seqid());
  var args = new ipquery_ipquery_args();
  args.ip = ip;
  args.tag = tag;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ipqueryClient.prototype.recv_ipquery = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ipquery_ipquery_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('ipquery failed: unknown result');
};
ipqueryClient.prototype.ipqueryEx = function(ipList, tag, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_ipqueryEx(ipList, tag);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_ipqueryEx(ipList, tag);
  }
};

ipqueryClient.prototype.send_ipqueryEx = function(ipList, tag) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('ipqueryEx', Thrift.MessageType.CALL, this.seqid());
  var args = new ipquery_ipqueryEx_args();
  args.ipList = ipList;
  args.tag = tag;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ipqueryClient.prototype.recv_ipqueryEx = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ipquery_ipqueryEx_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('ipqueryEx failed: unknown result');
};
ipqueryClient.prototype.ipqueryVersion = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_ipqueryVersion();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_ipqueryVersion();
  }
};

ipqueryClient.prototype.send_ipqueryVersion = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('ipqueryVersion', Thrift.MessageType.CALL, this.seqid());
  var args = new ipquery_ipqueryVersion_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ipqueryClient.prototype.recv_ipqueryVersion = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ipquery_ipqueryVersion_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('ipqueryVersion failed: unknown result');
};
ipqueryProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
ipqueryProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

ipqueryProcessor.prototype.process_ipquery = function(seqid, input, output) {
  var args = new ipquery_ipquery_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.ipquery.length === 2) {
    Q.fcall(this._handler.ipquery, args.ip, args.tag)
      .then(function(result) {
        var result = new ipquery_ipquery_result({success: result});
        output.writeMessageBegin("ipquery", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ipquery", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.ipquery(args.ip, args.tag, function (err, result) {
      if (err == null) {
        var result = new ipquery_ipquery_result((err != null ? err : {success: result}));
        output.writeMessageBegin("ipquery", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ipquery", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ipqueryProcessor.prototype.process_ipqueryEx = function(seqid, input, output) {
  var args = new ipquery_ipqueryEx_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.ipqueryEx.length === 2) {
    Q.fcall(this._handler.ipqueryEx, args.ipList, args.tag)
      .then(function(result) {
        var result = new ipquery_ipqueryEx_result({success: result});
        output.writeMessageBegin("ipqueryEx", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ipqueryEx", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.ipqueryEx(args.ipList, args.tag, function (err, result) {
      if (err == null) {
        var result = new ipquery_ipqueryEx_result((err != null ? err : {success: result}));
        output.writeMessageBegin("ipqueryEx", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ipqueryEx", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ipqueryProcessor.prototype.process_ipqueryVersion = function(seqid, input, output) {
  var args = new ipquery_ipqueryVersion_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.ipqueryVersion.length === 0) {
    Q.fcall(this._handler.ipqueryVersion)
      .then(function(result) {
        var result = new ipquery_ipqueryVersion_result({success: result});
        output.writeMessageBegin("ipqueryVersion", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ipqueryVersion", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.ipqueryVersion(function (err, result) {
      if (err == null) {
        var result = new ipquery_ipqueryVersion_result((err != null ? err : {success: result}));
        output.writeMessageBegin("ipqueryVersion", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ipqueryVersion", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

