/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ipquery_H
#define ipquery_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "ipquery_types.h"

namespace ipquery {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ipqueryIf {
 public:
  virtual ~ipqueryIf() {}
  virtual void ipquery(std::string& _return, const std::string& ip, const std::string& tag) = 0;
  virtual void ipqueryEx(std::vector<std::string> & _return, const std::vector<std::string> & ipList, const std::string& tag) = 0;
  virtual void ipqueryVersion(std::string& _return) = 0;
};

class ipqueryIfFactory {
 public:
  typedef ipqueryIf Handler;

  virtual ~ipqueryIfFactory() {}

  virtual ipqueryIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ipqueryIf* /* handler */) = 0;
};

class ipqueryIfSingletonFactory : virtual public ipqueryIfFactory {
 public:
  ipqueryIfSingletonFactory(const boost::shared_ptr<ipqueryIf>& iface) : iface_(iface) {}
  virtual ~ipqueryIfSingletonFactory() {}

  virtual ipqueryIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ipqueryIf* /* handler */) {}

 protected:
  boost::shared_ptr<ipqueryIf> iface_;
};

class ipqueryNull : virtual public ipqueryIf {
 public:
  virtual ~ipqueryNull() {}
  void ipquery(std::string& /* _return */, const std::string& /* ip */, const std::string& /* tag */) {
    return;
  }
  void ipqueryEx(std::vector<std::string> & /* _return */, const std::vector<std::string> & /* ipList */, const std::string& /* tag */) {
    return;
  }
  void ipqueryVersion(std::string& /* _return */) {
    return;
  }
};

typedef struct _ipquery_ipquery_args__isset {
  _ipquery_ipquery_args__isset() : ip(false), tag(false) {}
  bool ip :1;
  bool tag :1;
} _ipquery_ipquery_args__isset;

class ipquery_ipquery_args {
 public:

  ipquery_ipquery_args(const ipquery_ipquery_args&);
  ipquery_ipquery_args& operator=(const ipquery_ipquery_args&);
  ipquery_ipquery_args() : ip(), tag() {
  }

  virtual ~ipquery_ipquery_args() throw();
  std::string ip;
  std::string tag;

  _ipquery_ipquery_args__isset __isset;

  void __set_ip(const std::string& val);

  void __set_tag(const std::string& val);

  bool operator == (const ipquery_ipquery_args & rhs) const
  {
    if (!(ip == rhs.ip))
      return false;
    if (!(tag == rhs.tag))
      return false;
    return true;
  }
  bool operator != (const ipquery_ipquery_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ipquery_ipquery_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ipquery_ipquery_pargs {
 public:


  virtual ~ipquery_ipquery_pargs() throw();
  const std::string* ip;
  const std::string* tag;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ipquery_ipquery_result__isset {
  _ipquery_ipquery_result__isset() : success(false) {}
  bool success :1;
} _ipquery_ipquery_result__isset;

class ipquery_ipquery_result {
 public:

  ipquery_ipquery_result(const ipquery_ipquery_result&);
  ipquery_ipquery_result& operator=(const ipquery_ipquery_result&);
  ipquery_ipquery_result() : success() {
  }

  virtual ~ipquery_ipquery_result() throw();
  std::string success;

  _ipquery_ipquery_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const ipquery_ipquery_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ipquery_ipquery_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ipquery_ipquery_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ipquery_ipquery_presult__isset {
  _ipquery_ipquery_presult__isset() : success(false) {}
  bool success :1;
} _ipquery_ipquery_presult__isset;

class ipquery_ipquery_presult {
 public:


  virtual ~ipquery_ipquery_presult() throw();
  std::string* success;

  _ipquery_ipquery_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ipquery_ipqueryEx_args__isset {
  _ipquery_ipqueryEx_args__isset() : ipList(false), tag(false) {}
  bool ipList :1;
  bool tag :1;
} _ipquery_ipqueryEx_args__isset;

class ipquery_ipqueryEx_args {
 public:

  ipquery_ipqueryEx_args(const ipquery_ipqueryEx_args&);
  ipquery_ipqueryEx_args& operator=(const ipquery_ipqueryEx_args&);
  ipquery_ipqueryEx_args() : tag() {
  }

  virtual ~ipquery_ipqueryEx_args() throw();
  std::vector<std::string>  ipList;
  std::string tag;

  _ipquery_ipqueryEx_args__isset __isset;

  void __set_ipList(const std::vector<std::string> & val);

  void __set_tag(const std::string& val);

  bool operator == (const ipquery_ipqueryEx_args & rhs) const
  {
    if (!(ipList == rhs.ipList))
      return false;
    if (!(tag == rhs.tag))
      return false;
    return true;
  }
  bool operator != (const ipquery_ipqueryEx_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ipquery_ipqueryEx_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ipquery_ipqueryEx_pargs {
 public:


  virtual ~ipquery_ipqueryEx_pargs() throw();
  const std::vector<std::string> * ipList;
  const std::string* tag;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ipquery_ipqueryEx_result__isset {
  _ipquery_ipqueryEx_result__isset() : success(false) {}
  bool success :1;
} _ipquery_ipqueryEx_result__isset;

class ipquery_ipqueryEx_result {
 public:

  ipquery_ipqueryEx_result(const ipquery_ipqueryEx_result&);
  ipquery_ipqueryEx_result& operator=(const ipquery_ipqueryEx_result&);
  ipquery_ipqueryEx_result() {
  }

  virtual ~ipquery_ipqueryEx_result() throw();
  std::vector<std::string>  success;

  _ipquery_ipqueryEx_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const ipquery_ipqueryEx_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ipquery_ipqueryEx_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ipquery_ipqueryEx_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ipquery_ipqueryEx_presult__isset {
  _ipquery_ipqueryEx_presult__isset() : success(false) {}
  bool success :1;
} _ipquery_ipqueryEx_presult__isset;

class ipquery_ipqueryEx_presult {
 public:


  virtual ~ipquery_ipqueryEx_presult() throw();
  std::vector<std::string> * success;

  _ipquery_ipqueryEx_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ipquery_ipqueryVersion_args {
 public:

  ipquery_ipqueryVersion_args(const ipquery_ipqueryVersion_args&);
  ipquery_ipqueryVersion_args& operator=(const ipquery_ipqueryVersion_args&);
  ipquery_ipqueryVersion_args() {
  }

  virtual ~ipquery_ipqueryVersion_args() throw();

  bool operator == (const ipquery_ipqueryVersion_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ipquery_ipqueryVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ipquery_ipqueryVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ipquery_ipqueryVersion_pargs {
 public:


  virtual ~ipquery_ipqueryVersion_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ipquery_ipqueryVersion_result__isset {
  _ipquery_ipqueryVersion_result__isset() : success(false) {}
  bool success :1;
} _ipquery_ipqueryVersion_result__isset;

class ipquery_ipqueryVersion_result {
 public:

  ipquery_ipqueryVersion_result(const ipquery_ipqueryVersion_result&);
  ipquery_ipqueryVersion_result& operator=(const ipquery_ipqueryVersion_result&);
  ipquery_ipqueryVersion_result() : success() {
  }

  virtual ~ipquery_ipqueryVersion_result() throw();
  std::string success;

  _ipquery_ipqueryVersion_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const ipquery_ipqueryVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ipquery_ipqueryVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ipquery_ipqueryVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ipquery_ipqueryVersion_presult__isset {
  _ipquery_ipqueryVersion_presult__isset() : success(false) {}
  bool success :1;
} _ipquery_ipqueryVersion_presult__isset;

class ipquery_ipqueryVersion_presult {
 public:


  virtual ~ipquery_ipqueryVersion_presult() throw();
  std::string* success;

  _ipquery_ipqueryVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ipqueryClient : virtual public ipqueryIf {
 public:
  ipqueryClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ipqueryClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ipquery(std::string& _return, const std::string& ip, const std::string& tag);
  void send_ipquery(const std::string& ip, const std::string& tag);
  void recv_ipquery(std::string& _return);
  void ipqueryEx(std::vector<std::string> & _return, const std::vector<std::string> & ipList, const std::string& tag);
  void send_ipqueryEx(const std::vector<std::string> & ipList, const std::string& tag);
  void recv_ipqueryEx(std::vector<std::string> & _return);
  void ipqueryVersion(std::string& _return);
  void send_ipqueryVersion();
  void recv_ipqueryVersion(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ipqueryProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ipqueryIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ipqueryProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ipquery(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ipqueryEx(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ipqueryVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ipqueryProcessor(boost::shared_ptr<ipqueryIf> iface) :
    iface_(iface) {
    processMap_["ipquery"] = &ipqueryProcessor::process_ipquery;
    processMap_["ipqueryEx"] = &ipqueryProcessor::process_ipqueryEx;
    processMap_["ipqueryVersion"] = &ipqueryProcessor::process_ipqueryVersion;
  }

  virtual ~ipqueryProcessor() {}
};

class ipqueryProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ipqueryProcessorFactory(const ::boost::shared_ptr< ipqueryIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ipqueryIfFactory > handlerFactory_;
};

class ipqueryMultiface : virtual public ipqueryIf {
 public:
  ipqueryMultiface(std::vector<boost::shared_ptr<ipqueryIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ipqueryMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ipqueryIf> > ifaces_;
  ipqueryMultiface() {}
  void add(boost::shared_ptr<ipqueryIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ipquery(std::string& _return, const std::string& ip, const std::string& tag) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ipquery(_return, ip, tag);
    }
    ifaces_[i]->ipquery(_return, ip, tag);
    return;
  }

  void ipqueryEx(std::vector<std::string> & _return, const std::vector<std::string> & ipList, const std::string& tag) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ipqueryEx(_return, ipList, tag);
    }
    ifaces_[i]->ipqueryEx(_return, ipList, tag);
    return;
  }

  void ipqueryVersion(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ipqueryVersion(_return);
    }
    ifaces_[i]->ipqueryVersion(_return);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ipqueryConcurrentClient : virtual public ipqueryIf {
 public:
  ipqueryConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ipqueryConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ipquery(std::string& _return, const std::string& ip, const std::string& tag);
  int32_t send_ipquery(const std::string& ip, const std::string& tag);
  void recv_ipquery(std::string& _return, const int32_t seqid);
  void ipqueryEx(std::vector<std::string> & _return, const std::vector<std::string> & ipList, const std::string& tag);
  int32_t send_ipqueryEx(const std::vector<std::string> & ipList, const std::string& tag);
  void recv_ipqueryEx(std::vector<std::string> & _return, const int32_t seqid);
  void ipqueryVersion(std::string& _return);
  int32_t send_ipqueryVersion();
  void recv_ipqueryVersion(std::string& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
